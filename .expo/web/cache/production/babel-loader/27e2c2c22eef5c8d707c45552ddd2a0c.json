{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _objectSpread from\"@babel/runtime/helpers/objectSpread\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";var _jsxFileName=\"/Users/satya/Workspace/Callstack/react-navigation-stack/src/vendor/views/Stack/Card.tsx\";import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Platform from\"react-native-web/dist/exports/Platform\";import InteractionManager from\"react-native-web/dist/exports/InteractionManager\";import{PanGestureHandler,State as GestureState}from'react-native-gesture-handler';import Color from'color';import PointerEventsView from\"./PointerEventsView\";import StackGestureContext from\"../../utils/StackGestureContext\";import StackCardAnimationContext from\"../../utils/StackCardAnimationContext\";import getDistanceForDirection from\"../../utils/getDistanceForDirection\";import getInvertedMultiplier from\"../../utils/getInvertedMultiplier\";import memoize from\"../../utils/memoize\";var GESTURE_VELOCITY_IMPACT=0.3;var TRUE=1;var FALSE=0;var GESTURE_RESPONSE_DISTANCE_HORIZONTAL=50;var GESTURE_RESPONSE_DISTANCE_VERTICAL=135;var Card=function(_React$Component){_inherits(Card,_React$Component);function Card(){var _getPrototypeOf2;var _this;_classCallCheck(this,Card);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(Card)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.isClosing=new Animated.Value(FALSE);_this.inverted=new Animated.Value(getInvertedMultiplier(_this.props.gestureDirection));_this.layout={width:new Animated.Value(_this.props.layout.width),height:new Animated.Value(_this.props.layout.height)};_this.isSwiping=new Animated.Value(FALSE);_this.animate=function(_ref){var closing=_ref.closing,velocity=_ref.velocity;var _this$props=_this.props,gesture=_this$props.gesture,transitionSpec=_this$props.transitionSpec,onOpen=_this$props.onOpen,onClose=_this$props.onClose,onTransitionStart=_this$props.onTransitionStart;var toValue=_this.getAnimateToValue(_objectSpread({},_this.props,{closing:closing}));var spec=closing?transitionSpec.close:transitionSpec.open;var animation=spec.animation==='spring'?Animated.spring:Animated.timing;onTransitionStart==null?void 0:onTransitionStart({closing:Boolean(closing)});animation(gesture,_objectSpread({},spec.config,{velocity:velocity,useNativeDriver:true,toValue:toValue})).start(function(_ref2){var finished=_ref2.finished;if(finished){if(closing){onClose();}else{onOpen();}}});};_this.getAnimateToValue=function(_ref3){var closing=_ref3.closing,layout=_ref3.layout,gestureDirection=_ref3.gestureDirection;if(!closing){return 0;}return getDistanceForDirection(layout,gestureDirection);};_this.handleStartInteraction=function(){if(_this.interactionHandle===undefined){_this.interactionHandle=InteractionManager.createInteractionHandle();}};_this.handleEndInteraction=function(){if(_this.interactionHandle!==undefined){InteractionManager.clearInteractionHandle(_this.interactionHandle);_this.interactionHandle=undefined;}};_this.handleGestureStateChange=function(_ref4){var nativeEvent=_ref4.nativeEvent;var _this$props2=_this.props,layout=_this$props2.layout,onGestureBegin=_this$props2.onGestureBegin,onGestureCanceled=_this$props2.onGestureCanceled,onGestureEnd=_this$props2.onGestureEnd,gestureDirection=_this$props2.gestureDirection,gestureVelocityImpact=_this$props2.gestureVelocityImpact;switch(nativeEvent.state){case GestureState.BEGAN:_this.isSwiping.setValue(TRUE);_this.handleStartInteraction();onGestureBegin==null?void 0:onGestureBegin();break;case GestureState.CANCELLED:_this.isSwiping.setValue(FALSE);_this.handleEndInteraction();onGestureCanceled==null?void 0:onGestureCanceled();break;case GestureState.END:{_this.isSwiping.setValue(FALSE);_this.handleEndInteraction();var distance;var translation;var velocity;if(gestureDirection==='vertical'||gestureDirection==='vertical-inverted'){distance=layout.height;translation=nativeEvent.translationY;velocity=nativeEvent.velocityY;}else{distance=layout.width;translation=nativeEvent.translationX;velocity=nativeEvent.velocityX;}var closing=Math.abs(translation+velocity*gestureVelocityImpact)>distance/2?velocity!==0||translation!==0:false;_this.animate({closing:closing,velocity:velocity});onGestureEnd==null?void 0:onGestureEnd();break;}}};_this.getCardAnimationContext=memoize(function(index,current,next,layout,insetTop,insetRight,insetBottom,insetLeft){return{index:index,current:{progress:current},next:next&&{progress:next},closing:_this.isClosing,swiping:_this.isSwiping,inverted:_this.inverted,layouts:{screen:layout},insets:{top:insetTop,right:insetRight,bottom:insetBottom,left:insetLeft}};});_this.gestureRef=React.createRef();return _this;}_createClass(Card,[{key:\"componentDidMount\",value:function componentDidMount(){this.animate({closing:this.props.closing});}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){var _this$props3=this.props,layout=_this$props3.layout,gestureDirection=_this$props3.gestureDirection,closing=_this$props3.closing;var width=layout.width,height=layout.height;if(width!==prevProps.layout.width){this.layout.width.setValue(width);}if(height!==prevProps.layout.height){this.layout.height.setValue(height);}if(gestureDirection!==prevProps.gestureDirection){this.inverted.setValue(getInvertedMultiplier(gestureDirection));}if(this.getAnimateToValue(this.props)!==this.getAnimateToValue(prevProps)){this.animate({closing:closing});}}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.handleEndInteraction();}},{key:\"gestureActivationCriteria\",value:function gestureActivationCriteria(){var _this$props4=this.props,layout=_this$props4.layout,gestureDirection=_this$props4.gestureDirection,gestureResponseDistance=_this$props4.gestureResponseDistance;var distance=gestureDirection==='vertical'||gestureDirection==='vertical-inverted'?(gestureResponseDistance==null?void 0:gestureResponseDistance.vertical)!==undefined?gestureResponseDistance.vertical:GESTURE_RESPONSE_DISTANCE_VERTICAL:(gestureResponseDistance==null?void 0:gestureResponseDistance.horizontal)!==undefined?gestureResponseDistance.horizontal:GESTURE_RESPONSE_DISTANCE_HORIZONTAL;if(gestureDirection==='vertical'){return{maxDeltaX:15,minOffsetY:5,hitSlop:{bottom:-layout.height+distance}};}else if(gestureDirection==='vertical-inverted'){return{maxDeltaX:15,minOffsetY:-5,hitSlop:{top:-layout.height+distance}};}else{var hitSlop=-layout.width+distance;var invertedMultiplier=getInvertedMultiplier(gestureDirection);if(invertedMultiplier===1){return{minOffsetX:5,maxDeltaY:20,hitSlop:{right:hitSlop}};}else{return{minOffsetX:-5,maxDeltaY:20,hitSlop:{left:hitSlop}};}}}},{key:\"render\",value:function render(){var _this$props5=this.props,active=_this$props5.active,styleInterpolator=_this$props5.styleInterpolator,index=_this$props5.index,current=_this$props5.current,gesture=_this$props5.gesture,next=_this$props5.next,layout=_this$props5.layout,insets=_this$props5.insets,overlayEnabled=_this$props5.overlayEnabled,shadowEnabled=_this$props5.shadowEnabled,gestureEnabled=_this$props5.gestureEnabled,gestureDirection=_this$props5.gestureDirection,children=_this$props5.children,customContainerStyle=_this$props5.containerStyle,contentStyle=_this$props5.contentStyle,rest=_objectWithoutProperties(_this$props5,[\"active\",\"styleInterpolator\",\"index\",\"current\",\"gesture\",\"next\",\"layout\",\"insets\",\"overlayEnabled\",\"shadowEnabled\",\"gestureEnabled\",\"gestureDirection\",\"children\",\"containerStyle\",\"contentStyle\"]);var interpolatedStyle=styleInterpolator({index:index,current:{progress:current},next:next&&{progress:next},closing:this.isClosing,swiping:this.isSwiping,inverted:this.inverted,layouts:{screen:layout},insets:insets});var animationContext=this.getCardAnimationContext(index,current,next,layout,insets.top,insets.right,insets.bottom,insets.left);var containerStyle=interpolatedStyle.containerStyle,cardStyle=interpolatedStyle.cardStyle,overlayStyle=interpolatedStyle.overlayStyle,shadowStyle=interpolatedStyle.shadowStyle;var handleGestureEvent=gestureEnabled?Animated.event([{nativeEvent:gestureDirection==='vertical'||gestureDirection==='vertical-inverted'?{translationY:gesture}:{translationX:gesture}}],{useNativeDriver:true}):undefined;var _StyleSheet$flatten=StyleSheet.flatten(contentStyle||{}),backgroundColor=_StyleSheet$flatten.backgroundColor;var isTransparent=backgroundColor?Color(backgroundColor).alpha()===0:false;return React.createElement(StackGestureContext.Provider,{value:this.gestureRef,__source:{fileName:_jsxFileName,lineNumber:413}},React.createElement(View,_extends({pointerEvents:\"box-none\"},rest,{__source:{fileName:_jsxFileName,lineNumber:414}}),overlayEnabled&&overlayStyle?React.createElement(Animated.View,{pointerEvents:\"none\",style:[styles.overlay,overlayStyle],__source:{fileName:_jsxFileName,lineNumber:416}}):null,React.createElement(Animated.View,{style:[styles.container,containerStyle,customContainerStyle],pointerEvents:\"box-none\",__source:{fileName:_jsxFileName,lineNumber:421}},React.createElement(PanGestureHandler,_extends({ref:this.gestureRef,enabled:layout.width!==0&&gestureEnabled,onGestureEvent:handleGestureEvent,onHandlerStateChange:this.handleGestureStateChange},this.gestureActivationCriteria(),{__source:{fileName:_jsxFileName,lineNumber:425}}),React.createElement(Animated.View,{style:[styles.container,cardStyle],__source:{fileName:_jsxFileName,lineNumber:432}},shadowEnabled&&shadowStyle&&!isTransparent?React.createElement(Animated.View,{style:[styles.shadow,gestureDirection==='horizontal'?styles.shadowHorizontal:styles.shadowVertical,shadowStyle],pointerEvents:\"none\",__source:{fileName:_jsxFileName,lineNumber:434}}):null,React.createElement(PointerEventsView,{active:active,progress:current,style:[styles.content,contentStyle],__source:{fileName:_jsxFileName,lineNumber:445}},React.createElement(StackCardAnimationContext.Provider,{value:animationContext,__source:{fileName:_jsxFileName,lineNumber:450}},children)))))));}}]);return Card;}(React.Component);Card.defaultProps={overlayEnabled:Platform.OS!=='ios',shadowEnabled:true,gestureEnabled:true,gestureVelocityImpact:GESTURE_VELOCITY_IMPACT};export{Card as default};var styles=StyleSheet.create({container:{flex:1},content:{flex:1,overflow:'hidden'},overlay:_objectSpread({},StyleSheet.absoluteFillObject,{backgroundColor:'#000'}),shadow:{position:'absolute',backgroundColor:'#fff',shadowRadius:5,shadowColor:'#000',shadowOpacity:0.3},shadowHorizontal:{top:0,left:0,bottom:0,width:3,shadowOffset:{width:-1,height:1}},shadowVertical:{top:0,left:0,right:0,height:3,shadowOffset:{width:1,height:-1}}});","map":{"version":3,"sources":["Card.tsx"],"names":["State","GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","Card","React","Component","defaultProps","overlayEnabled","Platform","shadowEnabled","gestureEnabled","gestureVelocityImpact","closing","prevProps","layout","gestureDirection","width","height","getInvertedMultiplier","isClosing","Animated","inverted","isSwiping","animate","velocity","gesture","transitionSpec","onOpen","onClose","onTransitionStart","toValue","spec","animation","Boolean","useNativeDriver","finished","getAnimateToValue","getDistanceForDirection","handleStartInteraction","InteractionManager","handleEndInteraction","handleGestureStateChange","nativeEvent","onGestureBegin","onGestureCanceled","onGestureEnd","GestureState","distance","translation","Math","getCardAnimationContext","memoize","index","current","progress","next","swiping","layouts","screen","insets","top","right","bottom","left","gestureResponseDistance","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","gestureRef","active","styleInterpolator","children","customContainerStyle","contentStyle","rest","interpolatedStyle","animationContext","containerStyle","cardStyle","overlayStyle","shadowStyle","handleGestureEvent","translationY","translationX","backgroundColor","StyleSheet","isTransparent","Color","styles","container","flex","content","overflow","overlay","shadow","position","shadowRadius","shadowColor","shadowOpacity","shadowHorizontal","shadowOffset","shadowVertical"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  ViewProps,\n  StyleProp,\n  ViewStyle,\n  Platform,\n  InteractionManager,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  State as GestureState,\n  PanGestureHandlerGestureEvent,\n} from 'react-native-gesture-handler';\nimport { EdgeInsets } from 'react-native-safe-area-context';\nimport Color from 'color';\nimport PointerEventsView from './PointerEventsView';\nimport StackGestureContext from '../../utils/StackGestureContext';\nimport StackCardAnimationContext from '../../utils/StackCardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport {\n  TransitionSpec,\n  StackCardStyleInterpolator,\n  GestureDirection,\n  Layout,\n} from '../../types';\n\ntype Props = ViewProps & {\n  index: number;\n  active: boolean;\n  closing?: boolean;\n  next?: Animated.AnimatedInterpolation;\n  current: Animated.AnimatedInterpolation;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransitionStart?: (props: { closing: boolean }) => void;\n  onGestureBegin?: () => void;\n  onGestureCanceled?: () => void;\n  onGestureEnd?: () => void;\n  children: React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    overlayEnabled: Platform.OS !== 'ios',\n    shadowEnabled: true,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n  };\n\n  componentDidMount() {\n    this.animate({ closing: this.props.closing });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    if (\n      this.getAnimateToValue(this.props) !== this.getAnimateToValue(prevProps)\n    ) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.handleEndInteraction();\n  }\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(this.props.gestureDirection)\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing?: boolean;\n    velocity?: number;\n  }) => {\n    const {\n      gesture,\n      transitionSpec,\n      onOpen,\n      onClose,\n      onTransitionStart,\n    } = this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    onTransitionStart?.({ closing: Boolean(closing) });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      useNativeDriver: true,\n      toValue,\n    }).start(({ finished }) => {\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n  }) => {\n    if (!closing) {\n      return 0;\n    }\n\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      layout,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.BEGAN:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED:\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n        onGestureCanceled?.();\n        break;\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          Math.abs(translation + velocity * gestureVelocityImpact) >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : false;\n\n        this.animate({ closing, velocity });\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimationContext = memoize(\n    (\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n\n    const distance =\n      gestureDirection === 'vertical' ||\n      gestureDirection === 'vertical-inverted'\n        ? gestureResponseDistance?.vertical !== undefined\n          ? gestureResponseDistance.vertical\n          : GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : gestureResponseDistance?.horizontal !== undefined\n        ? gestureResponseDistance.horizontal\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n        };\n      }\n    }\n  }\n\n  private gestureRef: React.Ref<PanGestureHandler> = React.createRef();\n\n  render() {\n    const {\n      active,\n      styleInterpolator,\n      index,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    const interpolatedStyle = styleInterpolator({\n      index,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets,\n    });\n\n    const animationContext = this.getCardAnimationContext(\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle,\n    } = interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver: true }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent = backgroundColor\n      ? Color(backgroundColor).alpha() === 0\n      : false;\n\n    return (\n      <StackGestureContext.Provider value={this.gestureRef}>\n        <View pointerEvents=\"box-none\" {...rest}>\n          {overlayEnabled && overlayStyle ? (\n            <Animated.View\n              pointerEvents=\"none\"\n              style={[styles.overlay, overlayStyle]}\n            />\n          ) : null}\n          <Animated.View\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              ref={this.gestureRef}\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={this.handleGestureStateChange}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View style={[styles.container, cardStyle]}>\n                {shadowEnabled && shadowStyle && !isTransparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? styles.shadowHorizontal\n                        : styles.shadowVertical,\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <PointerEventsView\n                  active={active}\n                  progress={current}\n                  style={[styles.content, contentStyle]}\n                >\n                  <StackCardAnimationContext.Provider value={animationContext}>\n                    {children}\n                  </StackCardAnimationContext.Provider>\n                </PointerEventsView>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </StackGestureContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    backgroundColor: '#fff',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    left: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowVertical: {\n    top: 0,\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n});\n"]},"metadata":{},"sourceType":"module"}