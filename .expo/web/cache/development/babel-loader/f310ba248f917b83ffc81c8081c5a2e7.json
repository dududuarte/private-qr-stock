{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-stack/src/vendor/views/Stack/CardStack.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { ScreenContainer, Screen, screensEnabled } from 'react-native-screens';\nimport { getDefaultHeaderHeight } from \"../Header/HeaderSegment\";\nimport CardContainer from \"./CardContainer\";\nimport { DefaultTransition, ModalTransition } from \"../../TransitionConfigs/TransitionPresets\";\nimport { forNoAnimation as forNoAnimationHeader } from \"../../TransitionConfigs/HeaderStyleInterpolators\";\nimport { forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nvar EPSILON = 1e-5;\nvar dimensions = Dimensions.get('window');\nvar layout = {\n  width: dimensions.width,\n  height: dimensions.height\n};\n\nvar MaybeScreenContainer = function MaybeScreenContainer(_ref) {\n  var enabled = _ref.enabled,\n      rest = _objectWithoutProperties(_ref, [\"enabled\"]);\n\n  if (Platform.OS !== 'ios' && enabled && screensEnabled()) {\n    return React.createElement(ScreenContainer, _extends({}, rest, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      }\n    }));\n  }\n\n  return React.createElement(View, _extends({}, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    }\n  }));\n};\n\nvar MaybeScreen = function MaybeScreen(_ref2) {\n  var enabled = _ref2.enabled,\n      active = _ref2.active,\n      rest = _objectWithoutProperties(_ref2, [\"enabled\", \"active\"]);\n\n  if (Platform.OS !== 'ios' && enabled && screensEnabled()) {\n    return React.createElement(Screen, _extends({\n      active: active\n    }, rest, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      }\n    }));\n  }\n\n  return React.createElement(View, _extends({}, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    }\n  }));\n};\n\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\n\nvar getFloatingHeaderHeights = function getFloatingHeaderHeights(routes, insets, descriptors, layout, previous) {\n  return routes.reduce(function (acc, curr) {\n    var _ref3 = descriptors[curr.key] || {},\n        _ref3$options = _ref3.options,\n        options = _ref3$options === void 0 ? {} : _ref3$options;\n\n    var _StyleSheet$flatten = StyleSheet.flatten(options.headerStyle || {}),\n        _StyleSheet$flatten$h = _StyleSheet$flatten.height,\n        height = _StyleSheet$flatten$h === void 0 ? previous[curr.key] : _StyleSheet$flatten$h;\n\n    acc[curr.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, _objectSpread({}, insets, options.safeAreaInsets));\n    return acc;\n  }, {});\n};\n\nvar getDistanceFromOptions = function getDistanceFromOptions(mode, layout, descriptor) {\n  var _ref4 = (descriptor == null ? void 0 : descriptor.options) || {},\n      _ref4$gestureDirectio = _ref4.gestureDirection,\n      gestureDirection = _ref4$gestureDirectio === void 0 ? mode === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection : _ref4$gestureDirectio;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nvar getProgressFromGesture = function getProgressFromGesture(mode, gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions(mode, layout, descriptor);\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n      extrapolate: 'clamp'\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n    extrapolate: 'clamp'\n  });\n};\n\nvar CardStack = function (_React$Component) {\n  _inherits(CardStack, _React$Component);\n\n  function CardStack() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CardStack);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CardStack)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: layout,\n      descriptors: _this.props.descriptors,\n      floatingHeaderHeights: {}\n    };\n\n    _this.handleLayout = function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n\n        return {\n          layout: layout,\n          floatingHeaderHeights: getFloatingHeaderHeights(props.routes, props.insets, state.descriptors, layout, {})\n        };\n      });\n    };\n\n    _this.handleFloatingHeaderLayout = function (_ref5) {\n      var route = _ref5.route,\n          height = _ref5.height;\n\n      _this.setState(function (_ref6) {\n        var floatingHeaderHeights = _ref6.floatingHeaderHeights;\n        var previousHeight = _this.state.floatingHeaderHeights[route.key];\n\n        if (previousHeight && previousHeight === height) {\n          return null;\n        }\n\n        return {\n          floatingHeaderHeights: _objectSpread({}, floatingHeaderHeights, _defineProperty({}, route.key, height))\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          mode = _this$props.mode,\n          insets = _this$props.insets,\n          descriptors = _this$props.descriptors,\n          state = _this$props.state,\n          routes = _this$props.routes,\n          closingRouteKeys = _this$props.closingRouteKeys,\n          onOpenRoute = _this$props.onOpenRoute,\n          onCloseRoute = _this$props.onCloseRoute,\n          getPreviousRoute = _this$props.getPreviousRoute,\n          getGesturesEnabled = _this$props.getGesturesEnabled,\n          renderHeader = _this$props.renderHeader,\n          renderScene = _this$props.renderScene,\n          headerMode = _this$props.headerMode,\n          onTransitionStart = _this$props.onTransitionStart,\n          onTransitionEnd = _this$props.onTransitionEnd,\n          onPageChangeStart = _this$props.onPageChangeStart,\n          onPageChangeConfirm = _this$props.onPageChangeConfirm,\n          onPageChangeCancel = _this$props.onPageChangeCancel;\n      var _this$state = this.state,\n          scenes = _this$state.scenes,\n          layout = _this$state.layout,\n          gestures = _this$state.gestures,\n          floatingHeaderHeights = _this$state.floatingHeaderHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedDescriptor = descriptors[focusedRoute.key];\n      var focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n      var defaultTransitionPreset = mode === 'modal' ? ModalTransition : DefaultTransition;\n\n      if (headerMode === 'screen') {\n        defaultTransitionPreset = _objectSpread({}, defaultTransitionPreset, {\n          headerStyleInterpolator: forNoAnimationHeader\n        });\n      }\n\n      var _ref7 = focusedOptions.safeAreaInsets || {},\n          _ref7$top = _ref7.top,\n          top = _ref7$top === void 0 ? insets.top : _ref7$top,\n          _ref7$right = _ref7.right,\n          right = _ref7$right === void 0 ? insets.right : _ref7$right,\n          _ref7$bottom = _ref7.bottom,\n          bottom = _ref7$bottom === void 0 ? insets.bottom : _ref7$bottom,\n          _ref7$left = _ref7.left,\n          left = _ref7$left === void 0 ? insets.left : _ref7$left;\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398\n        }\n      }, React.createElement(MaybeScreenContainer, {\n        enabled: mode !== 'modal',\n        style: styles.container,\n        onLayout: this.handleLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399\n        }\n      }, routes.map(function (route, index, self) {\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = index === self.length - 1 ? 1 : Platform.OS === 'android' ? scene.progress.next ? scene.progress.next.interpolate({\n          inputRange: [0, 1 - EPSILON, 1],\n          outputRange: [1, 1, 0],\n          extrapolate: 'clamp'\n        }) : 1 : index === self.length - 2 ? 1 : 0;\n\n        var _ref8 = scene.descriptor ? scene.descriptor.options : {},\n            safeAreaInsets = _ref8.safeAreaInsets,\n            headerShown = _ref8.headerShown,\n            headerTransparent = _ref8.headerTransparent,\n            cardShadowEnabled = _ref8.cardShadowEnabled,\n            cardOverlayEnabled = _ref8.cardOverlayEnabled,\n            cardStyle = _ref8.cardStyle,\n            animationEnabled = _ref8.animationEnabled,\n            gestureResponseDistance = _ref8.gestureResponseDistance,\n            gestureVelocityImpact = _ref8.gestureVelocityImpact,\n            _ref8$gestureDirectio = _ref8.gestureDirection,\n            gestureDirection = _ref8$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref8$gestureDirectio,\n            _ref8$transitionSpec = _ref8.transitionSpec,\n            transitionSpec = _ref8$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref8$transitionSpec,\n            _ref8$cardStyleInterp = _ref8.cardStyleInterpolator,\n            cardStyleInterpolator = _ref8$cardStyleInterp === void 0 ? animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref8$cardStyleInterp,\n            _ref8$headerStyleInte = _ref8.headerStyleInterpolator,\n            headerStyleInterpolator = _ref8$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref8$headerStyleInte;\n\n        var transitionConfig = {\n          transitionSpec: transitionSpec,\n          cardStyleInterpolator: cardStyleInterpolator,\n          headerStyleInterpolator: headerStyleInterpolator\n        };\n\n        if (index !== self.length - 1) {\n          var nextScene = scenes[index + 1];\n\n          if (nextScene) {\n            var _ref9 = nextScene.descriptor ? nextScene.descriptor.options : {},\n                _animationEnabled = _ref9.animationEnabled,\n                _ref9$transitionSpec = _ref9.transitionSpec,\n                _transitionSpec = _ref9$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref9$transitionSpec,\n                _ref9$cardStyleInterp = _ref9.cardStyleInterpolator,\n                _cardStyleInterpolator = _ref9$cardStyleInterp === void 0 ? _animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref9$cardStyleInterp,\n                _ref9$headerStyleInte = _ref9.headerStyleInterpolator,\n                _headerStyleInterpolator = _ref9$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref9$headerStyleInte;\n\n            transitionConfig = {\n              transitionSpec: _transitionSpec,\n              cardStyleInterpolator: _cardStyleInterpolator,\n              headerStyleInterpolator: _headerStyleInterpolator\n            };\n          }\n        }\n\n        var _ref10 = safeAreaInsets || {},\n            _ref10$top = _ref10.top,\n            safeAreaInsetTop = _ref10$top === void 0 ? insets.top : _ref10$top,\n            _ref10$right = _ref10.right,\n            safeAreaInsetRight = _ref10$right === void 0 ? insets.right : _ref10$right,\n            _ref10$bottom = _ref10.bottom,\n            safeAreaInsetBottom = _ref10$bottom === void 0 ? insets.bottom : _ref10$bottom,\n            _ref10$left = _ref10.left,\n            safeAreaInsetLeft = _ref10$left === void 0 ? insets.left : _ref10$left;\n\n        return React.createElement(MaybeScreen, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          enabled: mode !== 'modal',\n          active: isScreenActive,\n          pointerEvents: \"box-none\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 489\n          }\n        }, React.createElement(CardContainer, _extends({\n          index: index,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          previousScene: scenes[index - 1],\n          state: state,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          cardOverlayEnabled: cardOverlayEnabled,\n          cardShadowEnabled: cardShadowEnabled,\n          cardStyle: cardStyle,\n          onPageChangeStart: onPageChangeStart,\n          onPageChangeConfirm: onPageChangeConfirm,\n          onPageChangeCancel: onPageChangeCancel,\n          gestureResponseDistance: gestureResponseDistance,\n          floatingHeaderHeight: floatingHeaderHeights[route.key],\n          getPreviousRoute: getPreviousRoute,\n          headerMode: headerMode,\n          headerShown: headerShown,\n          headerTransparent: headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          gestureEnabled: index !== 0 && getGesturesEnabled({\n            route: route\n          }),\n          gestureVelocityImpact: gestureVelocityImpact,\n          gestureDirection: gestureDirection\n        }, transitionConfig, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 496\n          }\n        })));\n      })), headerMode === 'float' ? renderHeader({\n        mode: 'float',\n        layout: layout,\n        insets: {\n          top: top,\n          right: right,\n          bottom: bottom,\n          left: left\n        },\n        scenes: scenes,\n        state: state,\n        getPreviousRoute: getPreviousRoute,\n        onContentHeightChange: this.handleFloatingHeaderLayout,\n        styleInterpolator: focusedOptions.headerStyleInterpolator !== undefined ? focusedOptions.headerStyleInterpolator : defaultTransitionPreset.headerStyleInterpolator,\n        style: styles.floating\n      }) : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n\n        var _ref11 = (descriptor == null ? void 0 : descriptor.options) || {},\n            animationEnabled = _ref11.animationEnabled;\n\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(props.mode, state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      return {\n        routes: props.routes,\n        scenes: props.routes.map(function (route, index, self) {\n          var previousRoute = self[index - 1];\n          var nextRoute = self[index + 1];\n          var oldScene = state.scenes[index];\n          var currentGesture = gestures[route.key];\n          var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n          var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n          var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n          var nextDescriptor = props.descriptors[nextRoute == null ? void 0 : nextRoute.key] || state.descriptors[nextRoute == null ? void 0 : nextRoute.key];\n          var previousDescriptor = props.descriptors[previousRoute == null ? void 0 : previousRoute.key] || state.descriptors[previousRoute == null ? void 0 : previousRoute.key];\n          var scene = {\n            route: route,\n            descriptor: descriptor,\n            progress: {\n              current: getProgressFromGesture(props.mode, currentGesture, state.layout, descriptor),\n              next: nextGesture ? getProgressFromGesture(props.mode, nextGesture, state.layout, nextDescriptor) : undefined,\n              previous: previousGesture ? getProgressFromGesture(props.mode, previousGesture, state.layout, previousDescriptor) : undefined\n            },\n            __memo: [route, state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n          };\n\n          if (oldScene && scene.__memo.every(function (it, i) {\n            return oldScene.__memo[i] === it;\n          })) {\n            return oldScene;\n          }\n\n          return scene;\n        }),\n        gestures: gestures,\n        descriptors: props.descriptors,\n        floatingHeaderHeights: getFloatingHeaderHeights(props.routes, props.insets, state.descriptors, state.layout, state.floatingHeaderHeights)\n      };\n    }\n  }]);\n\n  return CardStack;\n}(React.Component);\n\nexport { CardStack as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  floating: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  }\n});","map":{"version":3,"sources":["CardStack.tsx"],"names":["forNoAnimation","EPSILON","dimensions","Dimensions","layout","width","height","MaybeScreenContainer","enabled","rest","Platform","screensEnabled","MaybeScreen","active","FALLBACK_DESCRIPTOR","Object","options","getFloatingHeaderHeights","routes","descriptors","curr","previous","StyleSheet","acc","getDefaultHeaderHeight","getDistanceFromOptions","gestureDirection","mode","ModalTransition","DefaultTransition","getDistanceForDirection","getProgressFromGesture","distance","gesture","inputRange","outputRange","extrapolate","CardStack","React","Component","props","state","gestures","descriptor","animationEnabled","Animated","scenes","previousRoute","self","index","nextRoute","oldScene","currentGesture","route","previousGesture","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","__memo","floatingHeaderHeights","handleLayout","e","handleFloatingHeaderLayout","previousHeight","insets","closingRouteKeys","onOpenRoute","onCloseRoute","getPreviousRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","focusedRoute","focusedDescriptor","focusedOptions","defaultTransitionPreset","headerStyleInterpolator","top","right","bottom","left","styles","focused","isScreenActive","safeAreaInsets","headerShown","headerTransparent","cardShadowEnabled","cardOverlayEnabled","cardStyle","gestureResponseDistance","gestureVelocityImpact","transitionSpec","cardStyleInterpolator","transitionConfig","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","onContentHeightChange","styleInterpolator","style","container","flex","overflow","floating","position"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n  ViewProps,\n} from 'react-native';\nimport { EdgeInsets } from 'react-native-safe-area-context';\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer, Screen, screensEnabled } from 'react-native-screens'; // Import with * as to prevent getters being called\nimport { NavigationState as StackNavigationState } from 'react-navigation';\n\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport {\n  Route,\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  floatingHeaderHeights: Record<string, number>;\n};\n\nconst EPSILON = 1e-5;\n\nconst dimensions = Dimensions.get('window');\nconst layout = { width: dimensions.width, height: dimensions.height };\n\nconst MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (Platform.OS !== 'ios' && enabled && screensEnabled()) {\n    return <ScreenContainer {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nconst MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: number | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (Platform.OS !== 'ios' && enabled && screensEnabled()) {\n    // @ts-ignore\n    return <Screen active={active} {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getFloatingHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const { height = previous[curr.key] } = StyleSheet.flatten(\n      options.headerStyle || {}\n    );\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, {\n            ...insets,\n            ...options.safeAreaInsets,\n          });\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(mode, layout, descriptor);\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n      extrapolate: 'clamp',\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n    extrapolate: 'clamp',\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-ignore\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      floatingHeaderHeights: getFloatingHeaderHeights(\n        props.routes,\n        props.insets,\n        state.descriptors,\n        state.layout,\n        state.floatingHeaderHeights\n      ),\n    };\n  }\n\n  state: State = {\n    routes: [],\n    scenes: [],\n    gestures: {},\n    layout,\n    descriptors: this.props.descriptors,\n    // Used when card's header is null and mode is float to make transition\n    // between screens with headers and those without headers smooth.\n    // This is not a great heuristic here. We don't know synchronously\n    // on mount what the header height is so we have just used the most\n    // common cases here.\n    floatingHeaderHeights: {},\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        floatingHeaderHeights: getFloatingHeaderHeights(\n          props.routes,\n          props.insets,\n          state.descriptors,\n          layout,\n          {}\n        ),\n      };\n    });\n  };\n\n  private handleFloatingHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ floatingHeaderHeights }) => {\n      const previousHeight = this.state.floatingHeaderHeights[route.key];\n\n      if (previousHeight && previousHeight === height) {\n        return null;\n      }\n\n      return {\n        floatingHeaderHeights: {\n          ...floatingHeaderHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getPreviousRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n    } = this.props;\n\n    const { scenes, layout, gestures, floatingHeaderHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    return (\n      <React.Fragment>\n        <MaybeScreenContainer\n          enabled={mode !== 'modal'}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // Display current screen and a screen beneath.\n            // On Android screen beneath is hidden on animation finished bs of RNS's issue.\n            const isScreenActive =\n              index === self.length - 1\n                ? 1\n                : Platform.OS === 'android'\n                ? scene.progress.next\n                  ? scene.progress.next.interpolate({\n                      inputRange: [0, 1 - EPSILON, 1],\n                      outputRange: [1, 1, 0],\n                      extrapolate: 'clamp',\n                    })\n                  : 1\n                : index === self.length - 2\n                ? 1\n                : 0;\n\n            const {\n              safeAreaInsets,\n              headerShown,\n              headerTransparent,\n              cardShadowEnabled,\n              cardOverlayEnabled,\n              cardStyle,\n              animationEnabled,\n              gestureResponseDistance,\n              gestureVelocityImpact,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false\n                ? forNoAnimationCard\n                : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n            } = scene.descriptor\n              ? scene.descriptor.options\n              : ({} as StackNavigationOptions);\n\n            let transitionConfig = {\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator,\n            };\n\n            // When a screen is not the last, it should use next screen's transition config\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n            // For example combining a slide and a modal transition would look wrong otherwise\n            // With this approach, combining different transition styles in the same navigator mostly looks right\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n            // but majority of the transitions look alright\n            if (index !== self.length - 1) {\n              const nextScene = scenes[index + 1];\n\n              if (nextScene) {\n                const {\n                  animationEnabled,\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\n                  cardStyleInterpolator = animationEnabled === false\n                    ? forNoAnimationCard\n                    : defaultTransitionPreset.cardStyleInterpolator,\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                } = nextScene.descriptor\n                  ? nextScene.descriptor.options\n                  : ({} as StackNavigationOptions);\n\n                transitionConfig = {\n                  transitionSpec,\n                  cardStyleInterpolator,\n                  headerStyleInterpolator,\n                };\n              }\n            }\n\n            const {\n              top: safeAreaInsetTop = insets.top,\n              right: safeAreaInsetRight = insets.right,\n              bottom: safeAreaInsetBottom = insets.bottom,\n              left: safeAreaInsetLeft = insets.left,\n            } = safeAreaInsets || {};\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={mode !== 'modal'}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  previousScene={scenes[index - 1]}\n                  state={state}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  cardOverlayEnabled={cardOverlayEnabled}\n                  cardShadowEnabled={cardShadowEnabled}\n                  cardStyle={cardStyle}\n                  onPageChangeStart={onPageChangeStart}\n                  onPageChangeConfirm={onPageChangeConfirm}\n                  onPageChangeCancel={onPageChangeCancel}\n                  gestureResponseDistance={gestureResponseDistance}\n                  floatingHeaderHeight={floatingHeaderHeights[route.key]}\n                  getPreviousRoute={getPreviousRoute}\n                  headerMode={headerMode}\n                  headerShown={headerShown}\n                  headerTransparent={headerTransparent}\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\n                  gestureVelocityImpact={gestureVelocityImpact}\n                  gestureDirection={gestureDirection}\n                  {...transitionConfig}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {headerMode === 'float'\n          ? renderHeader({\n              mode: 'float',\n              layout,\n              insets: { top, right, bottom, left },\n              scenes,\n              state,\n              getPreviousRoute,\n              onContentHeightChange: this.handleFloatingHeaderLayout,\n              styleInterpolator:\n                focusedOptions.headerStyleInterpolator !== undefined\n                  ? focusedOptions.headerStyleInterpolator\n                  : defaultTransitionPreset.headerStyleInterpolator,\n              style: styles.floating,\n            })\n          : null}\n      </React.Fragment>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  floating: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}