{"ast":null,"code":"var _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-stack/src/vendor/views/Stack/CardContainer.tsx\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Card from \"./Card\";\nimport useTheme from \"../../../utils/useTheme\";\nexport default function CardContainer(_ref) {\n  var active = _ref.active,\n      cardOverlayEnabled = _ref.cardOverlayEnabled,\n      cardShadowEnabled = _ref.cardShadowEnabled,\n      cardStyle = _ref.cardStyle,\n      cardStyleInterpolator = _ref.cardStyleInterpolator,\n      closing = _ref.closing,\n      gesture = _ref.gesture,\n      floatingHeaderHeight = _ref.floatingHeaderHeight,\n      focused = _ref.focused,\n      gestureDirection = _ref.gestureDirection,\n      gestureEnabled = _ref.gestureEnabled,\n      gestureResponseDistance = _ref.gestureResponseDistance,\n      gestureVelocityImpact = _ref.gestureVelocityImpact,\n      getPreviousRoute = _ref.getPreviousRoute,\n      headerMode = _ref.headerMode,\n      headerShown = _ref.headerShown,\n      headerStyleInterpolator = _ref.headerStyleInterpolator,\n      headerTransparent = _ref.headerTransparent,\n      index = _ref.index,\n      layout = _ref.layout,\n      onCloseRoute = _ref.onCloseRoute,\n      onOpenRoute = _ref.onOpenRoute,\n      onPageChangeCancel = _ref.onPageChangeCancel,\n      onPageChangeConfirm = _ref.onPageChangeConfirm,\n      onPageChangeStart = _ref.onPageChangeStart,\n      onTransitionEnd = _ref.onTransitionEnd,\n      onTransitionStart = _ref.onTransitionStart,\n      previousScene = _ref.previousScene,\n      renderHeader = _ref.renderHeader,\n      renderScene = _ref.renderScene,\n      safeAreaInsetBottom = _ref.safeAreaInsetBottom,\n      safeAreaInsetLeft = _ref.safeAreaInsetLeft,\n      safeAreaInsetRight = _ref.safeAreaInsetRight,\n      safeAreaInsetTop = _ref.safeAreaInsetTop,\n      scene = _ref.scene,\n      state = _ref.state,\n      transitionSpec = _ref.transitionSpec;\n\n  var handleOpen = function handleOpen() {\n    onTransitionEnd == null ? void 0 : onTransitionEnd({\n      route: scene.route\n    }, false);\n    onOpenRoute({\n      route: scene.route\n    });\n  };\n\n  var handleClose = function handleClose() {\n    onTransitionEnd == null ? void 0 : onTransitionEnd({\n      route: scene.route\n    }, true);\n    onCloseRoute({\n      route: scene.route\n    });\n  };\n\n  var handleTransitionStart = function handleTransitionStart(_ref2) {\n    var closing = _ref2.closing;\n\n    if (closing) {\n      onPageChangeConfirm == null ? void 0 : onPageChangeConfirm();\n    } else {\n      onPageChangeCancel == null ? void 0 : onPageChangeCancel();\n    }\n\n    onTransitionStart == null ? void 0 : onTransitionStart({\n      route: scene.route\n    }, closing);\n  };\n\n  var insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  return React.createElement(Card, {\n    index: index,\n    active: active,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransitionStart: handleTransitionStart,\n    onGestureBegin: onPageChangeStart,\n    onGestureCanceled: onPageChangeCancel,\n    gestureEnabled: gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: \"box-none\",\n    containerStyle: headerMode === 'float' && !headerTransparent && headerShown !== false ? {\n      marginTop: floatingHeaderHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: colors.background\n    }, cardStyle],\n    style: StyleSheet.absoluteFill,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    }\n  }, React.createElement(View, {\n    style: styles.scene,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    }\n  }, renderScene({\n    route: scene.route\n  })), headerMode === 'screen' ? renderHeader({\n    mode: 'screen',\n    layout: layout,\n    insets: insets,\n    scenes: [previousScene, scene],\n    state: state,\n    getPreviousRoute: getPreviousRoute,\n    styleInterpolator: headerStyleInterpolator\n  }) : null));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["CardContainer.tsx"],"names":["active","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","closing","gesture","floatingHeaderHeight","focused","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","getPreviousRoute","headerMode","headerShown","headerStyleInterpolator","headerTransparent","index","layout","onCloseRoute","onOpenRoute","onPageChangeCancel","onPageChangeConfirm","onPageChangeStart","onTransitionEnd","onTransitionStart","previousScene","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","state","transitionSpec","handleOpen","route","handleClose","handleTransitionStart","insets","top","right","bottom","left","colors","useTheme","marginTop","backgroundColor","StyleSheet","styles","mode","scenes","styleInterpolator","container","flex","flexDirection"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { NavigationState as StackNavigationState } from 'react-navigation';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport useTheme from '../../../utils/useTheme';\nimport {\n  Route,\n  Scene,\n  Layout,\n  StackHeaderMode,\n  TransitionPreset,\n} from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  previousScene?: Scene<Route<string>>;\n  scene: Scene<Route<string>>;\n  state: StackNavigationState;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact?: number;\n  headerMode: StackHeaderMode;\n  headerShown?: boolean;\n  headerTransparent?: boolean;\n  floatingHeaderHeight: number;\n};\n\nexport default function CardContainer({\n  active,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  floatingHeaderHeight,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousRoute,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  headerTransparent,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onTransitionEnd,\n  onTransitionStart,\n  previousScene,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  state,\n  transitionSpec,\n}: Props) {\n  const handleOpen = () => {\n    onTransitionEnd?.({ route: scene.route }, false);\n    onOpenRoute({ route: scene.route });\n  };\n\n  const handleClose = () => {\n    onTransitionEnd?.({ route: scene.route }, true);\n    onCloseRoute({ route: scene.route });\n  };\n\n  const handleTransitionStart = ({ closing }: { closing: boolean }) => {\n    if (closing) {\n      onPageChangeConfirm?.();\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route: scene.route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  return (\n    <Card\n      index={index}\n      active={active}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransitionStart={handleTransitionStart}\n      onGestureBegin={onPageChangeStart}\n      onGestureCanceled={onPageChangeCancel}\n      gestureEnabled={gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents=\"box-none\"\n      containerStyle={\n        headerMode === 'float' && !headerTransparent && headerShown !== false\n          ? { marginTop: floatingHeaderHeight }\n          : null\n      }\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle]}\n      style={StyleSheet.absoluteFill}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>{renderScene({ route: scene.route })}</View>\n        {headerMode === 'screen'\n          ? renderHeader({\n              mode: 'screen',\n              layout,\n              insets,\n              scenes: [previousScene, scene],\n              state,\n              getPreviousRoute,\n              styleInterpolator: headerStyleInterpolator,\n            })\n          : null}\n      </View>\n    </Card>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}