{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-stack/src/vendor/views/Header/Header.tsx\";\nimport * as React from 'react';\nimport { StackActions } from 'react-navigation';\nimport HeaderSegment from \"./HeaderSegment\";\nimport HeaderTitle from \"./HeaderTitle\";\nexport default React.memo(function Header(props) {\n  var scene = props.scene,\n      previous = props.previous,\n      layout = props.layout,\n      insets = props.insets,\n      navigation = props.navigation,\n      styleInterpolator = props.styleInterpolator;\n  var options = scene.descriptor.options;\n  var title = typeof options.headerTitle !== 'function' && options.headerTitle !== undefined ? options.headerTitle : options.title !== undefined ? options.title : scene.route.routeName;\n  var leftLabel;\n\n  if (options.headerBackTitle !== undefined) {\n    leftLabel = options.headerBackTitle;\n  } else if (previous) {\n    var o = previous.descriptor.options;\n    leftLabel = typeof o.headerTitle !== 'function' && o.headerTitle !== undefined ? o.headerTitle : o.title !== undefined ? o.title : previous.route.routeName;\n  }\n\n  return React.createElement(HeaderSegment, _extends({}, options, {\n    insets: insets,\n    layout: layout,\n    scene: scene,\n    title: title,\n    leftLabel: leftLabel,\n    headerTitle: typeof options.headerTitle !== 'function' ? function (props) {\n      return React.createElement(HeaderTitle, _extends({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        }\n      }));\n    } : options.headerTitle,\n    onGoBack: previous ? function () {\n      return navigation.dispatch(StackActions.pop({\n        key: scene.route.key\n      }));\n    } : undefined,\n    styleInterpolator: styleInterpolator,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    }\n  }));\n});","map":{"version":3,"sources":["Header.tsx"],"names":["React","scene","previous","layout","insets","navigation","styleInterpolator","props","options","title","leftLabel","o","StackActions","key"],"mappings":";;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,YAAA,QAAA,kBAAA;AAEA,OAAA,aAAA;AAEA,OAAA,WAAA;AAEA,eAAeA,KAAK,CAALA,IAAAA,CAAW,SAAA,MAAA,CAAA,KAAA,EAAyC;AAAA,MAE/DC,KAF+D,GAQ7DM,KAR6D,CAAA,KAAA;AAAA,MAG/DL,QAH+D,GAQ7DK,KAR6D,CAAA,QAAA;AAAA,MAI/DJ,MAJ+D,GAQ7DI,KAR6D,CAAA,MAAA;AAAA,MAK/DH,MAL+D,GAQ7DG,KAR6D,CAAA,MAAA;AAAA,MAM/DF,UAN+D,GAQ7DE,KAR6D,CAAA,UAAA;AAAA,MAO/DD,iBAP+D,GAQ7DC,KAR6D,CAAA,iBAAA;AAAA,MASzDC,OATyD,GAS7CP,KAAK,CATwC,UAS7CA,CAT6C,OAAA;AAUjE,MAAMQ,KAAK,GACT,OAAOD,OAAO,CAAd,WAAA,KAAA,UAAA,IACAA,OAAO,CAAPA,WAAAA,KADA,SAAA,GAEIA,OAAO,CAFX,WAAA,GAGIA,OAAO,CAAPA,KAAAA,KAAAA,SAAAA,GACAA,OAAO,CADPA,KAAAA,GAEAP,KAAK,CAALA,KAAAA,CANN,SAAA;AAQA,MAAA,SAAA;;AAIA,MAAIO,OAAO,CAAPA,eAAAA,KAAJ,SAAA,EAA2C;AACzCE,IAAAA,SAAS,GAAGF,OAAO,CAAnBE,eAAAA;AADF,GAAA,MAEO,IAAA,QAAA,EAAc;AACnB,QAAMC,CAAC,GAAGT,QAAQ,CAARA,UAAAA,CAAV,OAAA;AAEAQ,IAAAA,SAAS,GACP,OAAOC,CAAC,CAAR,WAAA,KAAA,UAAA,IAAuCA,CAAC,CAADA,WAAAA,KAAvC,SAAA,GACIA,CAAC,CADL,WAAA,GAEIA,CAAC,CAADA,KAAAA,KAAAA,SAAAA,GACAA,CAAC,CADDA,KAAAA,GAEAT,QAAQ,CAARA,KAAAA,CALNQ,SAAAA;AAQF;;AAAA,SACE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA,QAAA,CAAA,EAAA,EAAA,OAAA,EAAA;AAEE,IAAA,MAAM,EAFR,MAAA;AAGE,IAAA,MAAM,EAHR,MAAA;AAIE,IAAA,KAAK,EAJP,KAAA;AAKE,IAAA,KAAK,EALP,KAAA;AAME,IAAA,SAAS,EANX,SAAA;AAOE,IAAA,WAAW,EACT,OAAOF,OAAO,CAAd,WAAA,KAAA,UAAA,GACI,UAAA,KAAA,EAAA;AAAA,aAAkC,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAlC;AAAkC;AAAA,OAAA,CAAA,CAAlC;AADJ,KAAA,GAEIA,OAAO,CAVf,WAAA;AAYE,IAAA,QAAQ,EACNN,QAAQ,GAEJ,YAAA;AAAA,aAAMG,UAAU,CAAVA,QAAAA,CAAoBO,YAAY,CAAZA,GAAAA,CAAiB;AAAEC,QAAAA,GAAG,EAAEZ,KAAK,CAALA,KAAAA,CAAlD;AAA2C,OAAjBW,CAApBP,CAAN;AAFI,KAAA,GAbZ,SAAA;AAkBE,IAAA,iBAAiB,EAlBnB,iBAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EADF;AACE;AAAA,GAAA,CAAA,CADF;AAnCF,CAAeL,CAAf","sourcesContent":["import * as React from 'react';\nimport { StackActions } from 'react-navigation';\n\nimport HeaderSegment from './HeaderSegment';\nimport { StackHeaderProps, StackHeaderTitleProps } from '../../types';\nimport HeaderTitle from './HeaderTitle';\n\nexport default React.memo(function Header(props: StackHeaderProps) {\n  const {\n    scene,\n    previous,\n    layout,\n    insets,\n    navigation,\n    styleInterpolator,\n  } = props;\n  const { options } = scene.descriptor;\n  const title =\n    typeof options.headerTitle !== 'function' &&\n    options.headerTitle !== undefined\n      ? options.headerTitle\n      : options.title !== undefined\n      ? options.title\n      : scene.route.routeName;\n\n  let leftLabel;\n\n  // The label for the left back button shows the title of the previous screen\n  // If a custom label is specified, we use it, otherwise use previous screen's title\n  if (options.headerBackTitle !== undefined) {\n    leftLabel = options.headerBackTitle;\n  } else if (previous) {\n    const o = previous.descriptor.options;\n\n    leftLabel =\n      typeof o.headerTitle !== 'function' && o.headerTitle !== undefined\n        ? o.headerTitle\n        : o.title !== undefined\n        ? o.title\n        : previous.route.routeName;\n  }\n\n  return (\n    <HeaderSegment\n      {...options}\n      insets={insets}\n      layout={layout}\n      scene={scene}\n      title={title}\n      leftLabel={leftLabel}\n      headerTitle={\n        typeof options.headerTitle !== 'function'\n          ? (props: StackHeaderTitleProps) => <HeaderTitle {...props} />\n          : options.headerTitle\n      }\n      onGoBack={\n        previous\n        // @ts-ignore\n          ? () => navigation.dispatch(StackActions.pop({ key: scene.route.key }))\n          : undefined\n      }\n      styleInterpolator={styleInterpolator}\n    />\n  );\n});\n"]},"metadata":{},"sourceType":"module"}