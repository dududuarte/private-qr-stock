{"ast":null,"code":"import Animated from \"react-native-web/dist/exports/Animated\";\nimport conditional from \"../utils/conditional\";\nvar add = Animated.add,\n    multiply = Animated.multiply;\nexport function forHorizontalIOS(_ref) {\n  var current = _ref.current,\n      next = _ref.next,\n      inverted = _ref.inverted,\n      screen = _ref.layouts.screen;\n  var translateFocused = multiply(current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [screen.width, 0]\n  }), inverted);\n  var translateUnfocused = next ? multiply(next.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, screen.width * -0.3]\n  }), inverted) : 0;\n  var overlayOpacity = current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 0.07]\n  });\n  var shadowOpacity = current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 0.3]\n  });\n  return {\n    cardStyle: {\n      transform: [{\n        translateX: translateFocused\n      }, {\n        translateX: translateUnfocused\n      }]\n    },\n    overlayStyle: {\n      opacity: overlayOpacity\n    },\n    shadowStyle: {\n      shadowOpacity: shadowOpacity\n    }\n  };\n}\nexport function forVerticalIOS(_ref2) {\n  var current = _ref2.current,\n      inverted = _ref2.inverted,\n      screen = _ref2.layouts.screen;\n  var translateY = multiply(current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [screen.height, 0]\n  }), inverted);\n  return {\n    cardStyle: {\n      transform: [{\n        translateY: translateY\n      }]\n    }\n  };\n}\nexport function forModalPresentationIOS(_ref3) {\n  var index = _ref3.index,\n      current = _ref3.current,\n      next = _ref3.next,\n      inverted = _ref3.inverted,\n      screen = _ref3.layouts.screen,\n      insets = _ref3.insets;\n  var isLandscape = screen.width > screen.height;\n  var topOffset = isLandscape ? 0 : 10;\n  var statusBarHeight = insets.top;\n  var aspectRatio = screen.height / screen.width;\n  var progress = add(current.progress, next ? next.progress : 0);\n  var translateY = multiply(progress.interpolate({\n    inputRange: [0, 1, 2],\n    outputRange: [screen.height, index === 0 ? 0 : topOffset, (index === 0 ? statusBarHeight : 0) - topOffset * aspectRatio]\n  }), inverted);\n  var overlayOpacity = progress.interpolate({\n    inputRange: [0, 1, 1.0001, 2],\n    outputRange: [0, 0.3, 1, 1]\n  });\n  var scale = isLandscape ? 1 : progress.interpolate({\n    inputRange: [0, 1, 2],\n    outputRange: [1, 1, screen.width ? 1 - topOffset * 2 / screen.width : 1]\n  });\n  var borderRadius = isLandscape ? 0 : index === 0 ? progress.interpolate({\n    inputRange: [0, 1, 2],\n    outputRange: [0, 0, 10]\n  }) : 10;\n  return {\n    cardStyle: {\n      overflow: 'hidden',\n      borderTopLeftRadius: borderRadius,\n      borderTopRightRadius: borderRadius,\n      marginTop: index === 0 ? 0 : statusBarHeight,\n      transform: [{\n        translateY: translateY\n      }, {\n        scale: scale\n      }]\n    },\n    overlayStyle: {\n      opacity: overlayOpacity\n    }\n  };\n}\nexport function forFadeFromBottomAndroid(_ref4) {\n  var current = _ref4.current,\n      inverted = _ref4.inverted,\n      screen = _ref4.layouts.screen,\n      closing = _ref4.closing;\n  var translateY = multiply(current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [screen.height * 0.08, 0]\n  }), inverted);\n  var opacity = conditional(closing, current.progress, current.progress.interpolate({\n    inputRange: [0, 0.5, 0.9, 1],\n    outputRange: [0, 0.25, 0.7, 1]\n  }));\n  return {\n    cardStyle: {\n      opacity: opacity,\n      transform: [{\n        translateY: translateY\n      }]\n    }\n  };\n}\nexport function forRevealFromBottomAndroid(_ref5) {\n  var current = _ref5.current,\n      next = _ref5.next,\n      inverted = _ref5.inverted,\n      screen = _ref5.layouts.screen;\n  var containerTranslateY = multiply(current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [screen.height, 0]\n  }), inverted);\n  var cardTranslateYFocused = multiply(current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [screen.height * (95.9 / 100) * -1, 0]\n  }), inverted);\n  var cardTranslateYUnfocused = next ? multiply(next.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, screen.height * (2 / 100) * -1]\n  }), inverted) : 0;\n  var overlayOpacity = current.progress.interpolate({\n    inputRange: [0, 0.36, 1],\n    outputRange: [0, 0.1, 0.1]\n  });\n  return {\n    containerStyle: {\n      overflow: 'hidden',\n      transform: [{\n        translateY: containerTranslateY\n      }]\n    },\n    cardStyle: {\n      transform: [{\n        translateY: cardTranslateYFocused\n      }, {\n        translateY: cardTranslateYUnfocused\n      }]\n    },\n    overlayStyle: {\n      opacity: overlayOpacity\n    }\n  };\n}\nexport function forScaleFromCenterAndroid(_ref6) {\n  var current = _ref6.current,\n      next = _ref6.next,\n      closing = _ref6.closing;\n  var progress = add(current.progress, next ? next.progress : 0);\n  var opacity = progress.interpolate({\n    inputRange: [0, 0.8, 1, 1.2, 2],\n    outputRange: [0, 0.5, 1, 0.33, 0]\n  });\n  var scale = conditional(closing, current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0.9, 1]\n  }), progress.interpolate({\n    inputRange: [0, 1, 2],\n    outputRange: [0.85, 1, 1.1]\n  }));\n  return {\n    containerStyle: {\n      opacity: opacity,\n      transform: [{\n        scale: scale\n      }]\n    }\n  };\n}\nexport function forNoAnimation() {\n  return {};\n}","map":{"version":3,"sources":["CardStyleInterpolators.tsx"],"names":["add","multiply","Animated","current","next","inverted","layouts","screen","translateFocused","inputRange","outputRange","translateUnfocused","overlayOpacity","shadowOpacity","cardStyle","transform","translateX","overlayStyle","opacity","shadowStyle","translateY","index","insets","isLandscape","topOffset","statusBarHeight","aspectRatio","progress","scale","borderRadius","overflow","borderTopLeftRadius","borderTopRightRadius","marginTop","closing","conditional","containerTranslateY","cardTranslateYFocused","cardTranslateYUnfocused","containerStyle"],"mappings":";AACA,OAAA,WAAA;AAMQA,IAAAA,G,GAAkBE,Q,CAAlBF,GAAAA;AAAAA,IAAKC,Q,GAAaC,Q,CAAbD,QAALD;AAKR,OAAO,SAAA,gBAAA,CAAA,IAAA,EAKqD;AAJ1DG,MAAAA,OAI0D,GAAA,IAAA,CAJ1DA,OAAAA;AAAAA,MACAC,IAG0D,GAAA,IAAA,CAH1DA,IADAD;AAAAA,MAEAE,QAE0D,GAAA,IAAA,CAF1DA,QAFAF;AAAAA,MAGWI,MAC+C,GAAA,IAAA,CAD1DD,OAC0D,CAD/CC,MAHXJ;AAKA,MAAMK,gBAAgB,GAAGP,QAAQ,CAC/BE,OAAO,CAAPA,QAAAA,CAAAA,WAAAA,CAA6B;AAC3BM,IAAAA,UAAU,EAAE,CAAA,CAAA,EADe,CACf,CADe;AAE3BC,IAAAA,WAAW,EAAE,CAACH,MAAM,CAAP,KAAA,EAHgB,CAGhB;AAFc,GAA7BJ,CAD+B,EAAjC,QAAiC,CAAjC;AAQA,MAAMQ,kBAAkB,GAAGP,IAAI,GAC3BH,QAAQ,CACNG,IAAI,CAAJA,QAAAA,CAAAA,WAAAA,CAA0B;AACxBK,IAAAA,UAAU,EAAE,CAAA,CAAA,EADY,CACZ,CADY;AAExBC,IAAAA,WAAW,EAAE,CAAA,CAAA,EAAIH,MAAM,CAANA,KAAAA,GAAe,CAH5B,GAGS;AAFW,GAA1BH,CADM,EADmB,QACnB,CADmB,GAA/B,CAAA;AAUA,MAAMQ,cAAc,GAAGT,OAAO,CAAPA,QAAAA,CAAAA,WAAAA,CAA6B;AAClDM,IAAAA,UAAU,EAAE,CAAA,CAAA,EADsC,CACtC,CADsC;AAElDC,IAAAA,WAAW,EAAE,CAAA,CAAA,EAFf,IAEe;AAFqC,GAA7BP,CAAvB;AAKA,MAAMU,aAAa,GAAGV,OAAO,CAAPA,QAAAA,CAAAA,WAAAA,CAA6B;AACjDM,IAAAA,UAAU,EAAE,CAAA,CAAA,EADqC,CACrC,CADqC;AAEjDC,IAAAA,WAAW,EAAE,CAAA,CAAA,EAFf,GAEe;AAFoC,GAA7BP,CAAtB;AAKA,SAAO;AACLW,IAAAA,SAAS,EAAE;AACTC,MAAAA,SAAS,EAAE,CAET;AAAEC,QAAAA,UAAU,EAFH;AAET,OAFS,EAIT;AAAEA,QAAAA,UAAU,EANX;AAMD,OAJS;AADF,KADN;AASLC,IAAAA,YAAY,EAAE;AAAEC,MAAAA,OAAO,EATlB;AASS,KATT;AAULC,IAAAA,WAAW,EAAE;AAAEN,MAAAA,aAAa,EAV9B;AAUe;AAVR,GAAP;AAiBF;AAAA,OAAO,SAAA,cAAA,CAAA,KAAA,EAIqD;AAH1DV,MAAAA,OAG0D,GAAA,KAAA,CAH1DA,OAAAA;AAAAA,MACAE,QAE0D,GAAA,KAAA,CAF1DA,QADAF;AAAAA,MAEWI,MAC+C,GAAA,KAAA,CAD1DD,OAC0D,CAD/CC,MAFXJ;AAIA,MAAMiB,UAAU,GAAGnB,QAAQ,CACzBE,OAAO,CAAPA,QAAAA,CAAAA,WAAAA,CAA6B;AAC3BM,IAAAA,UAAU,EAAE,CAAA,CAAA,EADe,CACf,CADe;AAE3BC,IAAAA,WAAW,EAAE,CAACH,MAAM,CAAP,MAAA,EAHU,CAGV;AAFc,GAA7BJ,CADyB,EAA3B,QAA2B,CAA3B;AAQA,SAAO;AACLW,IAAAA,SAAS,EAAE;AACTC,MAAAA,SAAS,EAAE,CAET;AAAEK,QAAAA,UAAU,EAJlB;AAIM,OAFS;AADF;AADN,GAAP;AAaF;AAAA,OAAO,SAAA,uBAAA,CAAA,KAAA,EAOqD;AAN1DC,MAAAA,KAM0D,GAAA,KAAA,CAN1DA,KAAAA;AAAAA,MACAlB,OAK0D,GAAA,KAAA,CAL1DA,OADAkB;AAAAA,MAEAjB,IAI0D,GAAA,KAAA,CAJ1DA,IAFAiB;AAAAA,MAGAhB,QAG0D,GAAA,KAAA,CAH1DA,QAHAgB;AAAAA,MAIWd,MAE+C,GAAA,KAAA,CAF1DD,OAE0D,CAF/CC,MAJXc;AAAAA,MAKAC,MAC0D,GAAA,KAAA,CAD1DA,MALAD;AAOA,MAAME,WAAW,GAAGhB,MAAM,CAANA,KAAAA,GAAeA,MAAM,CAAzC,MAAA;AACA,MAAMiB,SAAS,GAAGD,WAAW,GAAA,CAAA,GAA7B,EAAA;AACA,MAAME,eAAe,GAAGH,MAAM,CAA9B,GAAA;AACA,MAAMI,WAAW,GAAGnB,MAAM,CAANA,MAAAA,GAAgBA,MAAM,CAA1C,KAAA;AAEA,MAAMoB,QAAQ,GAAG3B,GAAG,CAACG,OAAO,CAAR,QAAA,EAAmBC,IAAI,GAAGA,IAAI,CAAP,QAAA,GAA3C,CAAoB,CAApB;AAEA,MAAMgB,UAAU,GAAGnB,QAAQ,CACzB0B,QAAQ,CAARA,WAAAA,CAAqB;AACnBlB,IAAAA,UAAU,EAAE,CAAA,CAAA,EAAA,CAAA,EADO,CACP,CADO;AAEnBC,IAAAA,WAAW,EAAE,CACXH,MAAM,CADK,MAAA,EAEXc,KAAK,KAALA,CAAAA,GAAAA,CAAAA,GAFW,SAAA,EAGX,CAACA,KAAK,KAALA,CAAAA,GAAAA,eAAAA,GAAD,CAAA,IAAsCG,SAAS,GAN1B,WAGV;AAFM,GAArBG,CADyB,EAA3B,QAA2B,CAA3B;AAYA,MAAMf,cAAc,GAAGe,QAAQ,CAARA,WAAAA,CAAqB;AAC1ClB,IAAAA,UAAU,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,MAAA,EAD8B,CAC9B,CAD8B;AAE1CC,IAAAA,WAAW,EAAE,CAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAFf,CAEe;AAF6B,GAArBiB,CAAvB;AAKA,MAAMC,KAAK,GAAGL,WAAW,GAAA,CAAA,GAErBI,QAAQ,CAARA,WAAAA,CAAqB;AACnBlB,IAAAA,UAAU,EAAE,CAAA,CAAA,EAAA,CAAA,EADO,CACP,CADO;AAEnBC,IAAAA,WAAW,EAAE,CAAA,CAAA,EAAA,CAAA,EAGXH,MAAM,CAANA,KAAAA,GAAe,IAAKiB,SAAS,GAAV,CAACA,GAAiBjB,MAAM,CAA3CA,KAAAA,GAPR,CAImB;AAFM,GAArBoB,CAFJ;AAWA,MAAME,YAAY,GAAGN,WAAW,GAAA,CAAA,GAE5BF,KAAK,KAALA,CAAAA,GACAM,QAAQ,CAARA,WAAAA,CAAqB;AACnBlB,IAAAA,UAAU,EAAE,CAAA,CAAA,EAAA,CAAA,EADO,CACP,CADO;AAEnBC,IAAAA,WAAW,EAAE,CAAA,CAAA,EAAA,CAAA,EAHfW,EAGe;AAFM,GAArBM,CADAN,GAFJ,EAAA;AASA,SAAO;AACLP,IAAAA,SAAS,EAAE;AACTgB,MAAAA,QAAQ,EADC,QAAA;AAETC,MAAAA,mBAAmB,EAFV,YAAA;AAGTC,MAAAA,oBAAoB,EAHX,YAAA;AAITC,MAAAA,SAAS,EAAEZ,KAAK,KAALA,CAAAA,GAAAA,CAAAA,GAJF,eAAA;AAKTN,MAAAA,SAAS,EAAE,CAAC;AAAEK,QAAAA,UAAU,EAAb;AAAC,OAAD,EAAiB;AAAEQ,QAAAA,KAAK,EANhC;AAMyB,OAAjB;AALF,KADN;AAQLX,IAAAA,YAAY,EAAE;AAAEC,MAAAA,OAAO,EARzB;AAQgB;AART,GAAP;AAeF;AAAA,OAAO,SAAA,wBAAA,CAAA,KAAA,EAKqD;AAJ1Df,MAAAA,OAI0D,GAAA,KAAA,CAJ1DA,OAAAA;AAAAA,MACAE,QAG0D,GAAA,KAAA,CAH1DA,QADAF;AAAAA,MAEWI,MAE+C,GAAA,KAAA,CAF1DD,OAE0D,CAF/CC,MAFXJ;AAAAA,MAGA+B,OAC0D,GAAA,KAAA,CAD1DA,OAHA/B;AAKA,MAAMiB,UAAU,GAAGnB,QAAQ,CACzBE,OAAO,CAAPA,QAAAA,CAAAA,WAAAA,CAA6B;AAC3BM,IAAAA,UAAU,EAAE,CAAA,CAAA,EADe,CACf,CADe;AAE3BC,IAAAA,WAAW,EAAE,CAACH,MAAM,CAANA,MAAAA,GAAD,IAAA,EAHU,CAGV;AAFc,GAA7BJ,CADyB,EAA3B,QAA2B,CAA3B;AAQA,MAAMe,OAAO,GAAGiB,WAAW,CAAA,OAAA,EAEzBhC,OAAO,CAFkB,QAAA,EAGzBA,OAAO,CAAPA,QAAAA,CAAAA,WAAAA,CAA6B;AAC3BM,IAAAA,UAAU,EAAE,CAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EADe,CACf,CADe;AAE3BC,IAAAA,WAAW,EAAE,CAAA,CAAA,EAAA,IAAA,EAAA,GAAA,EALjB,CAKiB;AAFc,GAA7BP,CAHyB,CAA3B;AASA,SAAO;AACLW,IAAAA,SAAS,EAAE;AACTI,MAAAA,OAAO,EADE,OAAA;AAETH,MAAAA,SAAS,EAAE,CAAC;AAAEK,QAAAA,UAAU,EAH5B;AAGgB,OAAD;AAFF;AADN,GAAP;AAWF;AAAA,OAAO,SAAA,0BAAA,CAAA,KAAA,EAKqD;AAJ1DjB,MAAAA,OAI0D,GAAA,KAAA,CAJ1DA,OAAAA;AAAAA,MACAC,IAG0D,GAAA,KAAA,CAH1DA,IADAD;AAAAA,MAEAE,QAE0D,GAAA,KAAA,CAF1DA,QAFAF;AAAAA,MAGWI,MAC+C,GAAA,KAAA,CAD1DD,OAC0D,CAD/CC,MAHXJ;AAKA,MAAMiC,mBAAmB,GAAGnC,QAAQ,CAClCE,OAAO,CAAPA,QAAAA,CAAAA,WAAAA,CAA6B;AAC3BM,IAAAA,UAAU,EAAE,CAAA,CAAA,EADe,CACf,CADe;AAE3BC,IAAAA,WAAW,EAAE,CAACH,MAAM,CAAP,MAAA,EAHmB,CAGnB;AAFc,GAA7BJ,CADkC,EAApC,QAAoC,CAApC;AAQA,MAAMkC,qBAAqB,GAAGpC,QAAQ,CACpCE,OAAO,CAAPA,QAAAA,CAAAA,WAAAA,CAA6B;AAC3BM,IAAAA,UAAU,EAAE,CAAA,CAAA,EADe,CACf,CADe;AAE3BC,IAAAA,WAAW,EAAE,CAACH,MAAM,CAANA,MAAAA,IAAiB,OAAjBA,GAAAA,IAA+B,CAAhC,CAAA,EAHqB,CAGrB;AAFc,GAA7BJ,CADoC,EAAtC,QAAsC,CAAtC;AAQA,MAAMmC,uBAAuB,GAAGlC,IAAI,GAChCH,QAAQ,CACNG,IAAI,CAAJA,QAAAA,CAAAA,WAAAA,CAA0B;AACxBK,IAAAA,UAAU,EAAE,CAAA,CAAA,EADY,CACZ,CADY;AAExBC,IAAAA,WAAW,EAAE,CAAA,CAAA,EAAIH,MAAM,CAANA,MAAAA,IAAiB,IAAjBA,GAAAA,IAA4B,CAHzC,CAGS;AAFW,GAA1BH,CADM,EADwB,QACxB,CADwB,GAApC,CAAA;AAUA,MAAMQ,cAAc,GAAGT,OAAO,CAAPA,QAAAA,CAAAA,WAAAA,CAA6B;AAClDM,IAAAA,UAAU,EAAE,CAAA,CAAA,EAAA,IAAA,EADsC,CACtC,CADsC;AAElDC,IAAAA,WAAW,EAAE,CAAA,CAAA,EAAA,GAAA,EAFf,GAEe;AAFqC,GAA7BP,CAAvB;AAKA,SAAO;AACLoC,IAAAA,cAAc,EAAE;AACdT,MAAAA,QAAQ,EADM,QAAA;AAEdf,MAAAA,SAAS,EAAE,CAAC;AAAEK,QAAAA,UAAU,EAHrB;AAGS,OAAD;AAFG,KADX;AAKLN,IAAAA,SAAS,EAAE;AACTC,MAAAA,SAAS,EAAE,CACT;AAAEK,QAAAA,UAAU,EADH;AACT,OADS,EAET;AAAEA,QAAAA,UAAU,EARX;AAQD,OAFS;AADF,KALN;AAWLH,IAAAA,YAAY,EAAE;AAAEC,MAAAA,OAAO,EAXzB;AAWgB;AAXT,GAAP;AAkBF;AAAA,OAAO,SAAA,yBAAA,CAAA,KAAA,EAIqD;AAH1Df,MAAAA,OAG0D,GAAA,KAAA,CAH1DA,OAAAA;AAAAA,MACAC,IAE0D,GAAA,KAAA,CAF1DA,IADAD;AAAAA,MAEA+B,OAC0D,GAAA,KAAA,CAD1DA,OAFA/B;AAIA,MAAMwB,QAAQ,GAAG3B,GAAG,CAACG,OAAO,CAAR,QAAA,EAAmBC,IAAI,GAAGA,IAAI,CAAP,QAAA,GAA3C,CAAoB,CAApB;AAEA,MAAMc,OAAO,GAAGS,QAAQ,CAARA,WAAAA,CAAqB;AACnClB,IAAAA,UAAU,EAAE,CAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EADuB,CACvB,CADuB;AAEnCC,IAAAA,WAAW,EAAE,CAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAFf,CAEe;AAFsB,GAArBiB,CAAhB;AAKA,MAAMC,KAAK,GAAGO,WAAW,CAAA,OAAA,EAEvBhC,OAAO,CAAPA,QAAAA,CAAAA,WAAAA,CAA6B;AAC3BM,IAAAA,UAAU,EAAE,CAAA,CAAA,EADe,CACf,CADe;AAE3BC,IAAAA,WAAW,EAAE,CAAA,GAAA,EAJQ,CAIR;AAFc,GAA7BP,CAFuB,EAMvBwB,QAAQ,CAARA,WAAAA,CAAqB;AACnBlB,IAAAA,UAAU,EAAE,CAAA,CAAA,EAAA,CAAA,EADO,CACP,CADO;AAEnBC,IAAAA,WAAW,EAAE,CAAA,IAAA,EAAA,CAAA,EARjB,GAQiB;AAFM,GAArBiB,CANuB,CAAzB;AAYA,SAAO;AACLY,IAAAA,cAAc,EAAE;AACdrB,MAAAA,OAAO,EADO,OAAA;AAEdH,MAAAA,SAAS,EAAE,CAAC;AAAEa,QAAAA,KAAK,EAHvB;AAGgB,OAAD;AAFG;AADX,GAAP;AAQF;AAAA,OAAO,SAAA,cAAA,GAAsD;AAC3D,SAAA,EAAA;AACD","sourcesContent":["import { Animated } from 'react-native';\nimport conditional from '../utils/conditional';\nimport {\n  StackCardInterpolationProps,\n  StackCardInterpolatedStyle,\n} from '../types';\n\nconst { add, multiply } = Animated;\n\n/**\n * Standard iOS-style slide in from the right.\n */\nexport function forHorizontalIOS({\n  current,\n  next,\n  inverted,\n  layouts: { screen },\n}: StackCardInterpolationProps): StackCardInterpolatedStyle {\n  const translateFocused = multiply(\n    current.progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [screen.width, 0],\n    }),\n    inverted\n  );\n\n  const translateUnfocused = next\n    ? multiply(\n        next.progress.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, screen.width * -0.3],\n        }),\n        inverted\n      )\n    : 0;\n\n  const overlayOpacity = current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 0.07],\n  });\n\n  const shadowOpacity = current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 0.3],\n  });\n\n  return {\n    cardStyle: {\n      transform: [\n        // Translation for the animation of the current card\n        { translateX: translateFocused },\n        // Translation for the animation of the card on top of this\n        { translateX: translateUnfocused },\n      ],\n    },\n    overlayStyle: { opacity: overlayOpacity },\n    shadowStyle: { shadowOpacity },\n  };\n}\n\n/**\n * Standard iOS-style slide in from the bottom (used for modals).\n */\nexport function forVerticalIOS({\n  current,\n  inverted,\n  layouts: { screen },\n}: StackCardInterpolationProps): StackCardInterpolatedStyle {\n  const translateY = multiply(\n    current.progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [screen.height, 0],\n    }),\n    inverted\n  );\n\n  return {\n    cardStyle: {\n      transform: [\n        // Translation for the animation of the current card\n        { translateY },\n      ],\n    },\n  };\n}\n\n/**\n * Standard iOS-style modal animation in iOS 13.\n */\nexport function forModalPresentationIOS({\n  index,\n  current,\n  next,\n  inverted,\n  layouts: { screen },\n  insets,\n}: StackCardInterpolationProps): StackCardInterpolatedStyle {\n  const isLandscape = screen.width > screen.height;\n  const topOffset = isLandscape ? 0 : 10;\n  const statusBarHeight = insets.top;\n  const aspectRatio = screen.height / screen.width;\n\n  const progress = add(current.progress, next ? next.progress : 0);\n\n  const translateY = multiply(\n    progress.interpolate({\n      inputRange: [0, 1, 2],\n      outputRange: [\n        screen.height,\n        index === 0 ? 0 : topOffset,\n        (index === 0 ? statusBarHeight : 0) - topOffset * aspectRatio,\n      ],\n    }),\n    inverted\n  );\n\n  const overlayOpacity = progress.interpolate({\n    inputRange: [0, 1, 1.0001, 2],\n    outputRange: [0, 0.3, 1, 1],\n  });\n\n  const scale = isLandscape\n    ? 1\n    : progress.interpolate({\n        inputRange: [0, 1, 2],\n        outputRange: [\n          1,\n          1,\n          screen.width ? 1 - (topOffset * 2) / screen.width : 1,\n        ],\n      });\n\n  const borderRadius = isLandscape\n    ? 0\n    : index === 0\n    ? progress.interpolate({\n        inputRange: [0, 1, 2],\n        outputRange: [0, 0, 10],\n      })\n    : 10;\n\n  return {\n    cardStyle: {\n      overflow: 'hidden',\n      borderTopLeftRadius: borderRadius,\n      borderTopRightRadius: borderRadius,\n      marginTop: index === 0 ? 0 : statusBarHeight,\n      transform: [{ translateY }, { scale }],\n    },\n    overlayStyle: { opacity: overlayOpacity },\n  };\n}\n\n/**\n * Standard Android-style fade in from the bottom for Android Oreo.\n */\nexport function forFadeFromBottomAndroid({\n  current,\n  inverted,\n  layouts: { screen },\n  closing,\n}: StackCardInterpolationProps): StackCardInterpolatedStyle {\n  const translateY = multiply(\n    current.progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [screen.height * 0.08, 0],\n    }),\n    inverted\n  );\n\n  const opacity = conditional(\n    closing,\n    current.progress,\n    current.progress.interpolate({\n      inputRange: [0, 0.5, 0.9, 1],\n      outputRange: [0, 0.25, 0.7, 1],\n    })\n  );\n\n  return {\n    cardStyle: {\n      opacity,\n      transform: [{ translateY }],\n    },\n  };\n}\n\n/**\n * Standard Android-style reveal from the bottom for Android Pie.\n */\nexport function forRevealFromBottomAndroid({\n  current,\n  next,\n  inverted,\n  layouts: { screen },\n}: StackCardInterpolationProps): StackCardInterpolatedStyle {\n  const containerTranslateY = multiply(\n    current.progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [screen.height, 0],\n    }),\n    inverted\n  );\n\n  const cardTranslateYFocused = multiply(\n    current.progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [screen.height * (95.9 / 100) * -1, 0],\n    }),\n    inverted\n  );\n\n  const cardTranslateYUnfocused = next\n    ? multiply(\n        next.progress.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, screen.height * (2 / 100) * -1],\n        }),\n        inverted\n      )\n    : 0;\n\n  const overlayOpacity = current.progress.interpolate({\n    inputRange: [0, 0.36, 1],\n    outputRange: [0, 0.1, 0.1],\n  });\n\n  return {\n    containerStyle: {\n      overflow: 'hidden',\n      transform: [{ translateY: containerTranslateY }],\n    },\n    cardStyle: {\n      transform: [\n        { translateY: cardTranslateYFocused },\n        { translateY: cardTranslateYUnfocused },\n      ],\n    },\n    overlayStyle: { opacity: overlayOpacity },\n  };\n}\n\n/**\n * Standard Android-style reveal from the bottom for Android Q.\n */\nexport function forScaleFromCenterAndroid({\n  current,\n  next,\n  closing,\n}: StackCardInterpolationProps): StackCardInterpolatedStyle {\n  const progress = add(current.progress, next ? next.progress : 0);\n\n  const opacity = progress.interpolate({\n    inputRange: [0, 0.8, 1, 1.2, 2],\n    outputRange: [0, 0.5, 1, 0.33, 0],\n  });\n\n  const scale = conditional(\n    closing,\n    current.progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0.9, 1],\n    }),\n    progress.interpolate({\n      inputRange: [0, 1, 2],\n      outputRange: [0.85, 1, 1.1],\n    })\n  );\n\n  return {\n    containerStyle: {\n      opacity,\n      transform: [{ scale }],\n    },\n  };\n}\n\nexport function forNoAnimation(): StackCardInterpolatedStyle {\n  return {};\n}\n"]},"metadata":{},"sourceType":"module"}