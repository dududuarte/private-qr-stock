{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-stack/src/vendor/views/Stack/PointerEventsView.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nvar TRUE = 1;\nvar FALSE = 0;\nexport default function PointerEventsView(_ref) {\n  var active = _ref.active,\n      rest = _objectWithoutProperties(_ref, [\"active\"]);\n\n  var _React$useState = React.useState(function () {\n    return new Animated.Value(active ? TRUE : FALSE);\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      pointerEventsEnabled = _React$useState2[0];\n\n  var root = React.useRef(null);\n  var setPointerEventsEnabled = React.useCallback(function (enabled) {\n    var pointerEvents = enabled ? 'box-none' : 'none';\n    root.current && root.current.setNativeProps({\n      pointerEvents: pointerEvents\n    });\n  }, []);\n  React.useEffect(function () {\n    pointerEventsEnabled.setValue(active ? TRUE : FALSE);\n    setPointerEventsEnabled(active);\n  }, [active, pointerEventsEnabled, setPointerEventsEnabled]);\n  return React.createElement(View, _extends({\n    ref: root\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    }\n  }));\n}","map":{"version":3,"sources":["PointerEventsView.tsx"],"names":["TRUE","FALSE","active","rest","pointerEventsEnabled","React","Animated","root","setPointerEventsEnabled","pointerEvents","enabled"],"mappings":";;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AASA,IAAMA,IAAI,GAAV,CAAA;AACA,IAAMC,KAAK,GAAX,CAAA;AAMA,eAAe,SAAA,iBAAA,CAAA,IAAA,EAAuD;AAA1BC,MAAAA,MAA0B,GAAA,IAAA,CAA1BA,MAAAA;AAAAA,MAAWC,IAAe,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,QAAA,CAAA,CAA1BD;;AAA0B,MAAA,eAAA,GACrCG,KAAK,CAALA,QAAAA,CAC7B,YAAA;AAAA,WAAM,IAAIC,QAAQ,CAAZ,KAAA,CAAmBJ,MAAM,GAAA,IAAA,GAA/B,KAAM,CAAN;AAFkE,GACrCG,CADqC;AAAA,MAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;AAAA,MAC7DD,oBAD6D,GAAA,gBAAA,CAAA,CAAA,CAAA;;AAKpE,MAAMG,IAAI,GAAGF,KAAK,CAALA,MAAAA,CAAb,IAAaA,CAAb;AAEA,MAAMG,uBAAuB,GAAGH,KAAK,CAALA,WAAAA,CAAkB,UAAA,OAAA,EAAsB;AACtE,QAAMI,aAAa,GAAGC,OAAO,GAAA,UAAA,GAA7B,MAAA;AAEAH,IAAAA,IAAI,CAAJA,OAAAA,IAAgBA,IAAI,CAAJA,OAAAA,CAAAA,cAAAA,CAA4B;AAAEE,MAAAA,aAAa,EAA3DF;AAA4C,KAA5BA,CAAhBA;AAH8BF,GAAAA,EAAhC,EAAgCA,CAAhC;AAMAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBD,IAAAA,oBAAoB,CAApBA,QAAAA,CAA8BF,MAAM,GAAA,IAAA,GAApCE,KAAAA;AACAI,IAAAA,uBAAuB,CAAvBA,MAAuB,CAAvBA;AAFFH,GAAAA,EAGG,CAAA,MAAA,EAAA,oBAAA,EAHHA,uBAGG,CAHHA;AAKA,SAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAAM,IAAA,GAAG,EAAT;AAAA,GAAA,EAAA,IAAA,EAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAP;AAAO;AAAA,GAAA,CAAA,CAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { Animated, View, ViewProps } from 'react-native';\n\ntype Props = ViewProps & {\n  active: boolean;\n  progress: Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n};\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * Component that automatically computes the `pointerEvents` property\n * whenever position changes.\n */\nexport default function PointerEventsView({ active, ...rest }: Props) {\n  const [pointerEventsEnabled] = React.useState(\n    () => new Animated.Value(active ? TRUE : FALSE)\n  );\n\n  const root = React.useRef<View | null>(null);\n\n  const setPointerEventsEnabled = React.useCallback((enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    root.current && root.current.setNativeProps({ pointerEvents });\n  }, []);\n\n  React.useEffect(() => {\n    pointerEventsEnabled.setValue(active ? TRUE : FALSE);\n    setPointerEventsEnabled(active);\n  }, [active, pointerEventsEnabled, setPointerEventsEnabled]);\n\n  return <View ref={root} {...rest} />;\n}\n"]},"metadata":{},"sourceType":"module"}